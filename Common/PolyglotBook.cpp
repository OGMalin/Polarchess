#pragma once

#include "../Common/PolyglotBook.h"
#include <fstream>
#include <string>

using namespace std;

const HASHKEY PolyglotRandom64[781] = {
   HASHKEY(0x9D39247E33776D41), HASHKEY(0x2AF7398005AAA5C7), HASHKEY(0x44DB015024623547), HASHKEY(0x9C15F73E62A76AE2),
   HASHKEY(0x75834465489C0C89), HASHKEY(0x3290AC3A203001BF), HASHKEY(0x0FBBAD1F61042279), HASHKEY(0xE83A908FF2FB60CA),
   HASHKEY(0x0D7E765D58755C10), HASHKEY(0x1A083822CEAFE02D), HASHKEY(0x9605D5F0E25EC3B0), HASHKEY(0xD021FF5CD13A2ED5),
   HASHKEY(0x40BDF15D4A672E32), HASHKEY(0x011355146FD56395), HASHKEY(0x5DB4832046F3D9E5), HASHKEY(0x239F8B2D7FF719CC),
   HASHKEY(0x05D1A1AE85B49AA1), HASHKEY(0x679F848F6E8FC971), HASHKEY(0x7449BBFF801FED0B), HASHKEY(0x7D11CDB1C3B7ADF0),
   HASHKEY(0x82C7709E781EB7CC), HASHKEY(0xF3218F1C9510786C), HASHKEY(0x331478F3AF51BBE6), HASHKEY(0x4BB38DE5E7219443),
   HASHKEY(0xAA649C6EBCFD50FC), HASHKEY(0x8DBD98A352AFD40B), HASHKEY(0x87D2074B81D79217), HASHKEY(0x19F3C751D3E92AE1),
   HASHKEY(0xB4AB30F062B19ABF), HASHKEY(0x7B0500AC42047AC4), HASHKEY(0xC9452CA81A09D85D), HASHKEY(0x24AA6C514DA27500),
   HASHKEY(0x4C9F34427501B447), HASHKEY(0x14A68FD73C910841), HASHKEY(0xA71B9B83461CBD93), HASHKEY(0x03488B95B0F1850F),
   HASHKEY(0x637B2B34FF93C040), HASHKEY(0x09D1BC9A3DD90A94), HASHKEY(0x3575668334A1DD3B), HASHKEY(0x735E2B97A4C45A23),
   HASHKEY(0x18727070F1BD400B), HASHKEY(0x1FCBACD259BF02E7), HASHKEY(0xD310A7C2CE9B6555), HASHKEY(0xBF983FE0FE5D8244),
   HASHKEY(0x9F74D14F7454A824), HASHKEY(0x51EBDC4AB9BA3035), HASHKEY(0x5C82C505DB9AB0FA), HASHKEY(0xFCF7FE8A3430B241),
   HASHKEY(0x3253A729B9BA3DDE), HASHKEY(0x8C74C368081B3075), HASHKEY(0xB9BC6C87167C33E7), HASHKEY(0x7EF48F2B83024E20),
   HASHKEY(0x11D505D4C351BD7F), HASHKEY(0x6568FCA92C76A243), HASHKEY(0x4DE0B0F40F32A7B8), HASHKEY(0x96D693460CC37E5D),
   HASHKEY(0x42E240CB63689F2F), HASHKEY(0x6D2BDCDAE2919661), HASHKEY(0x42880B0236E4D951), HASHKEY(0x5F0F4A5898171BB6),
   HASHKEY(0x39F890F579F92F88), HASHKEY(0x93C5B5F47356388B), HASHKEY(0x63DC359D8D231B78), HASHKEY(0xEC16CA8AEA98AD76),
   HASHKEY(0x5355F900C2A82DC7), HASHKEY(0x07FB9F855A997142), HASHKEY(0x5093417AA8A7ED5E), HASHKEY(0x7BCBC38DA25A7F3C),
   HASHKEY(0x19FC8A768CF4B6D4), HASHKEY(0x637A7780DECFC0D9), HASHKEY(0x8249A47AEE0E41F7), HASHKEY(0x79AD695501E7D1E8),
   HASHKEY(0x14ACBAF4777D5776), HASHKEY(0xF145B6BECCDEA195), HASHKEY(0xDABF2AC8201752FC), HASHKEY(0x24C3C94DF9C8D3F6),
   HASHKEY(0xBB6E2924F03912EA), HASHKEY(0x0CE26C0B95C980D9), HASHKEY(0xA49CD132BFBF7CC4), HASHKEY(0xE99D662AF4243939),
   HASHKEY(0x27E6AD7891165C3F), HASHKEY(0x8535F040B9744FF1), HASHKEY(0x54B3F4FA5F40D873), HASHKEY(0x72B12C32127FED2B),
   HASHKEY(0xEE954D3C7B411F47), HASHKEY(0x9A85AC909A24EAA1), HASHKEY(0x70AC4CD9F04F21F5), HASHKEY(0xF9B89D3E99A075C2),
   HASHKEY(0x87B3E2B2B5C907B1), HASHKEY(0xA366E5B8C54F48B8), HASHKEY(0xAE4A9346CC3F7CF2), HASHKEY(0x1920C04D47267BBD),
   HASHKEY(0x87BF02C6B49E2AE9), HASHKEY(0x092237AC237F3859), HASHKEY(0xFF07F64EF8ED14D0), HASHKEY(0x8DE8DCA9F03CC54E),
   HASHKEY(0x9C1633264DB49C89), HASHKEY(0xB3F22C3D0B0B38ED), HASHKEY(0x390E5FB44D01144B), HASHKEY(0x5BFEA5B4712768E9),
   HASHKEY(0x1E1032911FA78984), HASHKEY(0x9A74ACB964E78CB3), HASHKEY(0x4F80F7A035DAFB04), HASHKEY(0x6304D09A0B3738C4),
   HASHKEY(0x2171E64683023A08), HASHKEY(0x5B9B63EB9CEFF80C), HASHKEY(0x506AACF489889342), HASHKEY(0x1881AFC9A3A701D6),
   HASHKEY(0x6503080440750644), HASHKEY(0xDFD395339CDBF4A7), HASHKEY(0xEF927DBCF00C20F2), HASHKEY(0x7B32F7D1E03680EC),
   HASHKEY(0xB9FD7620E7316243), HASHKEY(0x05A7E8A57DB91B77), HASHKEY(0xB5889C6E15630A75), HASHKEY(0x4A750A09CE9573F7),
   HASHKEY(0xCF464CEC899A2F8A), HASHKEY(0xF538639CE705B824), HASHKEY(0x3C79A0FF5580EF7F), HASHKEY(0xEDE6C87F8477609D),
   HASHKEY(0x799E81F05BC93F31), HASHKEY(0x86536B8CF3428A8C), HASHKEY(0x97D7374C60087B73), HASHKEY(0xA246637CFF328532),
   HASHKEY(0x043FCAE60CC0EBA0), HASHKEY(0x920E449535DD359E), HASHKEY(0x70EB093B15B290CC), HASHKEY(0x73A1921916591CBD),
   HASHKEY(0x56436C9FE1A1AA8D), HASHKEY(0xEFAC4B70633B8F81), HASHKEY(0xBB215798D45DF7AF), HASHKEY(0x45F20042F24F1768),
   HASHKEY(0x930F80F4E8EB7462), HASHKEY(0xFF6712FFCFD75EA1), HASHKEY(0xAE623FD67468AA70), HASHKEY(0xDD2C5BC84BC8D8FC),
   HASHKEY(0x7EED120D54CF2DD9), HASHKEY(0x22FE545401165F1C), HASHKEY(0xC91800E98FB99929), HASHKEY(0x808BD68E6AC10365),
   HASHKEY(0xDEC468145B7605F6), HASHKEY(0x1BEDE3A3AEF53302), HASHKEY(0x43539603D6C55602), HASHKEY(0xAA969B5C691CCB7A),
   HASHKEY(0xA87832D392EFEE56), HASHKEY(0x65942C7B3C7E11AE), HASHKEY(0xDED2D633CAD004F6), HASHKEY(0x21F08570F420E565),
   HASHKEY(0xB415938D7DA94E3C), HASHKEY(0x91B859E59ECB6350), HASHKEY(0x10CFF333E0ED804A), HASHKEY(0x28AED140BE0BB7DD),
   HASHKEY(0xC5CC1D89724FA456), HASHKEY(0x5648F680F11A2741), HASHKEY(0x2D255069F0B7DAB3), HASHKEY(0x9BC5A38EF729ABD4),
   HASHKEY(0xEF2F054308F6A2BC), HASHKEY(0xAF2042F5CC5C2858), HASHKEY(0x480412BAB7F5BE2A), HASHKEY(0xAEF3AF4A563DFE43),
   HASHKEY(0x19AFE59AE451497F), HASHKEY(0x52593803DFF1E840), HASHKEY(0xF4F076E65F2CE6F0), HASHKEY(0x11379625747D5AF3),
   HASHKEY(0xBCE5D2248682C115), HASHKEY(0x9DA4243DE836994F), HASHKEY(0x066F70B33FE09017), HASHKEY(0x4DC4DE189B671A1C),
   HASHKEY(0x51039AB7712457C3), HASHKEY(0xC07A3F80C31FB4B4), HASHKEY(0xB46EE9C5E64A6E7C), HASHKEY(0xB3819A42ABE61C87),
   HASHKEY(0x21A007933A522A20), HASHKEY(0x2DF16F761598AA4F), HASHKEY(0x763C4A1371B368FD), HASHKEY(0xF793C46702E086A0),
   HASHKEY(0xD7288E012AEB8D31), HASHKEY(0xDE336A2A4BC1C44B), HASHKEY(0x0BF692B38D079F23), HASHKEY(0x2C604A7A177326B3),
   HASHKEY(0x4850E73E03EB6064), HASHKEY(0xCFC447F1E53C8E1B), HASHKEY(0xB05CA3F564268D99), HASHKEY(0x9AE182C8BC9474E8),
   HASHKEY(0xA4FC4BD4FC5558CA), HASHKEY(0xE755178D58FC4E76), HASHKEY(0x69B97DB1A4C03DFE), HASHKEY(0xF9B5B7C4ACC67C96),
   HASHKEY(0xFC6A82D64B8655FB), HASHKEY(0x9C684CB6C4D24417), HASHKEY(0x8EC97D2917456ED0), HASHKEY(0x6703DF9D2924E97E),
   HASHKEY(0xC547F57E42A7444E), HASHKEY(0x78E37644E7CAD29E), HASHKEY(0xFE9A44E9362F05FA), HASHKEY(0x08BD35CC38336615),
   HASHKEY(0x9315E5EB3A129ACE), HASHKEY(0x94061B871E04DF75), HASHKEY(0xDF1D9F9D784BA010), HASHKEY(0x3BBA57B68871B59D),
   HASHKEY(0xD2B7ADEEDED1F73F), HASHKEY(0xF7A255D83BC373F8), HASHKEY(0xD7F4F2448C0CEB81), HASHKEY(0xD95BE88CD210FFA7),
   HASHKEY(0x336F52F8FF4728E7), HASHKEY(0xA74049DAC312AC71), HASHKEY(0xA2F61BB6E437FDB5), HASHKEY(0x4F2A5CB07F6A35B3),
   HASHKEY(0x87D380BDA5BF7859), HASHKEY(0x16B9F7E06C453A21), HASHKEY(0x7BA2484C8A0FD54E), HASHKEY(0xF3A678CAD9A2E38C),
   HASHKEY(0x39B0BF7DDE437BA2), HASHKEY(0xFCAF55C1BF8A4424), HASHKEY(0x18FCF680573FA594), HASHKEY(0x4C0563B89F495AC3),
   HASHKEY(0x40E087931A00930D), HASHKEY(0x8CFFA9412EB642C1), HASHKEY(0x68CA39053261169F), HASHKEY(0x7A1EE967D27579E2),
   HASHKEY(0x9D1D60E5076F5B6F), HASHKEY(0x3810E399B6F65BA2), HASHKEY(0x32095B6D4AB5F9B1), HASHKEY(0x35CAB62109DD038A),
   HASHKEY(0xA90B24499FCFAFB1), HASHKEY(0x77A225A07CC2C6BD), HASHKEY(0x513E5E634C70E331), HASHKEY(0x4361C0CA3F692F12),
   HASHKEY(0xD941ACA44B20A45B), HASHKEY(0x528F7C8602C5807B), HASHKEY(0x52AB92BEB9613989), HASHKEY(0x9D1DFA2EFC557F73),
   HASHKEY(0x722FF175F572C348), HASHKEY(0x1D1260A51107FE97), HASHKEY(0x7A249A57EC0C9BA2), HASHKEY(0x04208FE9E8F7F2D6),
   HASHKEY(0x5A110C6058B920A0), HASHKEY(0x0CD9A497658A5698), HASHKEY(0x56FD23C8F9715A4C), HASHKEY(0x284C847B9D887AAE),
   HASHKEY(0x04FEABFBBDB619CB), HASHKEY(0x742E1E651C60BA83), HASHKEY(0x9A9632E65904AD3C), HASHKEY(0x881B82A13B51B9E2),
   HASHKEY(0x506E6744CD974924), HASHKEY(0xB0183DB56FFC6A79), HASHKEY(0x0ED9B915C66ED37E), HASHKEY(0x5E11E86D5873D484),
   HASHKEY(0xF678647E3519AC6E), HASHKEY(0x1B85D488D0F20CC5), HASHKEY(0xDAB9FE6525D89021), HASHKEY(0x0D151D86ADB73615),
   HASHKEY(0xA865A54EDCC0F019), HASHKEY(0x93C42566AEF98FFB), HASHKEY(0x99E7AFEABE000731), HASHKEY(0x48CBFF086DDF285A),
   HASHKEY(0x7F9B6AF1EBF78BAF), HASHKEY(0x58627E1A149BBA21), HASHKEY(0x2CD16E2ABD791E33), HASHKEY(0xD363EFF5F0977996),
   HASHKEY(0x0CE2A38C344A6EED), HASHKEY(0x1A804AADB9CFA741), HASHKEY(0x907F30421D78C5DE), HASHKEY(0x501F65EDB3034D07),
   HASHKEY(0x37624AE5A48FA6E9), HASHKEY(0x957BAF61700CFF4E), HASHKEY(0x3A6C27934E31188A), HASHKEY(0xD49503536ABCA345),
   HASHKEY(0x088E049589C432E0), HASHKEY(0xF943AEE7FEBF21B8), HASHKEY(0x6C3B8E3E336139D3), HASHKEY(0x364F6FFA464EE52E),
   HASHKEY(0xD60F6DCEDC314222), HASHKEY(0x56963B0DCA418FC0), HASHKEY(0x16F50EDF91E513AF), HASHKEY(0xEF1955914B609F93),
   HASHKEY(0x565601C0364E3228), HASHKEY(0xECB53939887E8175), HASHKEY(0xBAC7A9A18531294B), HASHKEY(0xB344C470397BBA52),
   HASHKEY(0x65D34954DAF3CEBD), HASHKEY(0xB4B81B3FA97511E2), HASHKEY(0xB422061193D6F6A7), HASHKEY(0x071582401C38434D),
   HASHKEY(0x7A13F18BBEDC4FF5), HASHKEY(0xBC4097B116C524D2), HASHKEY(0x59B97885E2F2EA28), HASHKEY(0x99170A5DC3115544),
   HASHKEY(0x6F423357E7C6A9F9), HASHKEY(0x325928EE6E6F8794), HASHKEY(0xD0E4366228B03343), HASHKEY(0x565C31F7DE89EA27),
   HASHKEY(0x30F5611484119414), HASHKEY(0xD873DB391292ED4F), HASHKEY(0x7BD94E1D8E17DEBC), HASHKEY(0xC7D9F16864A76E94),
   HASHKEY(0x947AE053EE56E63C), HASHKEY(0xC8C93882F9475F5F), HASHKEY(0x3A9BF55BA91F81CA), HASHKEY(0xD9A11FBB3D9808E4),
   HASHKEY(0x0FD22063EDC29FCA), HASHKEY(0xB3F256D8ACA0B0B9), HASHKEY(0xB03031A8B4516E84), HASHKEY(0x35DD37D5871448AF),
   HASHKEY(0xE9F6082B05542E4E), HASHKEY(0xEBFAFA33D7254B59), HASHKEY(0x9255ABB50D532280), HASHKEY(0xB9AB4CE57F2D34F3),
   HASHKEY(0x693501D628297551), HASHKEY(0xC62C58F97DD949BF), HASHKEY(0xCD454F8F19C5126A), HASHKEY(0xBBE83F4ECC2BDECB),
   HASHKEY(0xDC842B7E2819E230), HASHKEY(0xBA89142E007503B8), HASHKEY(0xA3BC941D0A5061CB), HASHKEY(0xE9F6760E32CD8021),
   HASHKEY(0x09C7E552BC76492F), HASHKEY(0x852F54934DA55CC9), HASHKEY(0x8107FCCF064FCF56), HASHKEY(0x098954D51FFF6580),
   HASHKEY(0x23B70EDB1955C4BF), HASHKEY(0xC330DE426430F69D), HASHKEY(0x4715ED43E8A45C0A), HASHKEY(0xA8D7E4DAB780A08D),
   HASHKEY(0x0572B974F03CE0BB), HASHKEY(0xB57D2E985E1419C7), HASHKEY(0xE8D9ECBE2CF3D73F), HASHKEY(0x2FE4B17170E59750),
   HASHKEY(0x11317BA87905E790), HASHKEY(0x7FBF21EC8A1F45EC), HASHKEY(0x1725CABFCB045B00), HASHKEY(0x964E915CD5E2B207),
   HASHKEY(0x3E2B8BCBF016D66D), HASHKEY(0xBE7444E39328A0AC), HASHKEY(0xF85B2B4FBCDE44B7), HASHKEY(0x49353FEA39BA63B1),
   HASHKEY(0x1DD01AAFCD53486A), HASHKEY(0x1FCA8A92FD719F85), HASHKEY(0xFC7C95D827357AFA), HASHKEY(0x18A6A990C8B35EBD),
   HASHKEY(0xCCCB7005C6B9C28D), HASHKEY(0x3BDBB92C43B17F26), HASHKEY(0xAA70B5B4F89695A2), HASHKEY(0xE94C39A54A98307F),
   HASHKEY(0xB7A0B174CFF6F36E), HASHKEY(0xD4DBA84729AF48AD), HASHKEY(0x2E18BC1AD9704A68), HASHKEY(0x2DE0966DAF2F8B1C),
   HASHKEY(0xB9C11D5B1E43A07E), HASHKEY(0x64972D68DEE33360), HASHKEY(0x94628D38D0C20584), HASHKEY(0xDBC0D2B6AB90A559),
   HASHKEY(0xD2733C4335C6A72F), HASHKEY(0x7E75D99D94A70F4D), HASHKEY(0x6CED1983376FA72B), HASHKEY(0x97FCAACBF030BC24),
   HASHKEY(0x7B77497B32503B12), HASHKEY(0x8547EDDFB81CCB94), HASHKEY(0x79999CDFF70902CB), HASHKEY(0xCFFE1939438E9B24),
   HASHKEY(0x829626E3892D95D7), HASHKEY(0x92FAE24291F2B3F1), HASHKEY(0x63E22C147B9C3403), HASHKEY(0xC678B6D860284A1C),
   HASHKEY(0x5873888850659AE7), HASHKEY(0x0981DCD296A8736D), HASHKEY(0x9F65789A6509A440), HASHKEY(0x9FF38FED72E9052F),
   HASHKEY(0xE479EE5B9930578C), HASHKEY(0xE7F28ECD2D49EECD), HASHKEY(0x56C074A581EA17FE), HASHKEY(0x5544F7D774B14AEF),
   HASHKEY(0x7B3F0195FC6F290F), HASHKEY(0x12153635B2C0CF57), HASHKEY(0x7F5126DBBA5E0CA7), HASHKEY(0x7A76956C3EAFB413),
   HASHKEY(0x3D5774A11D31AB39), HASHKEY(0x8A1B083821F40CB4), HASHKEY(0x7B4A38E32537DF62), HASHKEY(0x950113646D1D6E03),
   HASHKEY(0x4DA8979A0041E8A9), HASHKEY(0x3BC36E078F7515D7), HASHKEY(0x5D0A12F27AD310D1), HASHKEY(0x7F9D1A2E1EBE1327),
   HASHKEY(0xDA3A361B1C5157B1), HASHKEY(0xDCDD7D20903D0C25), HASHKEY(0x36833336D068F707), HASHKEY(0xCE68341F79893389),
   HASHKEY(0xAB9090168DD05F34), HASHKEY(0x43954B3252DC25E5), HASHKEY(0xB438C2B67F98E5E9), HASHKEY(0x10DCD78E3851A492),
   HASHKEY(0xDBC27AB5447822BF), HASHKEY(0x9B3CDB65F82CA382), HASHKEY(0xB67B7896167B4C84), HASHKEY(0xBFCED1B0048EAC50),
   HASHKEY(0xA9119B60369FFEBD), HASHKEY(0x1FFF7AC80904BF45), HASHKEY(0xAC12FB171817EEE7), HASHKEY(0xAF08DA9177DDA93D),
   HASHKEY(0x1B0CAB936E65C744), HASHKEY(0xB559EB1D04E5E932), HASHKEY(0xC37B45B3F8D6F2BA), HASHKEY(0xC3A9DC228CAAC9E9),
   HASHKEY(0xF3B8B6675A6507FF), HASHKEY(0x9FC477DE4ED681DA), HASHKEY(0x67378D8ECCEF96CB), HASHKEY(0x6DD856D94D259236),
   HASHKEY(0xA319CE15B0B4DB31), HASHKEY(0x073973751F12DD5E), HASHKEY(0x8A8E849EB32781A5), HASHKEY(0xE1925C71285279F5),
   HASHKEY(0x74C04BF1790C0EFE), HASHKEY(0x4DDA48153C94938A), HASHKEY(0x9D266D6A1CC0542C), HASHKEY(0x7440FB816508C4FE),
   HASHKEY(0x13328503DF48229F), HASHKEY(0xD6BF7BAEE43CAC40), HASHKEY(0x4838D65F6EF6748F), HASHKEY(0x1E152328F3318DEA),
   HASHKEY(0x8F8419A348F296BF), HASHKEY(0x72C8834A5957B511), HASHKEY(0xD7A023A73260B45C), HASHKEY(0x94EBC8ABCFB56DAE),
   HASHKEY(0x9FC10D0F989993E0), HASHKEY(0xDE68A2355B93CAE6), HASHKEY(0xA44CFE79AE538BBE), HASHKEY(0x9D1D84FCCE371425),
   HASHKEY(0x51D2B1AB2DDFB636), HASHKEY(0x2FD7E4B9E72CD38C), HASHKEY(0x65CA5B96B7552210), HASHKEY(0xDD69A0D8AB3B546D),
   HASHKEY(0x604D51B25FBF70E2), HASHKEY(0x73AA8A564FB7AC9E), HASHKEY(0x1A8C1E992B941148), HASHKEY(0xAAC40A2703D9BEA0),
   HASHKEY(0x764DBEAE7FA4F3A6), HASHKEY(0x1E99B96E70A9BE8B), HASHKEY(0x2C5E9DEB57EF4743), HASHKEY(0x3A938FEE32D29981),
   HASHKEY(0x26E6DB8FFDF5ADFE), HASHKEY(0x469356C504EC9F9D), HASHKEY(0xC8763C5B08D1908C), HASHKEY(0x3F6C6AF859D80055),
   HASHKEY(0x7F7CC39420A3A545), HASHKEY(0x9BFB227EBDF4C5CE), HASHKEY(0x89039D79D6FC5C5C), HASHKEY(0x8FE88B57305E2AB6),
   HASHKEY(0xA09E8C8C35AB96DE), HASHKEY(0xFA7E393983325753), HASHKEY(0xD6B6D0ECC617C699), HASHKEY(0xDFEA21EA9E7557E3),
   HASHKEY(0xB67C1FA481680AF8), HASHKEY(0xCA1E3785A9E724E5), HASHKEY(0x1CFC8BED0D681639), HASHKEY(0xD18D8549D140CAEA),
   HASHKEY(0x4ED0FE7E9DC91335), HASHKEY(0xE4DBF0634473F5D2), HASHKEY(0x1761F93A44D5AEFE), HASHKEY(0x53898E4C3910DA55),
   HASHKEY(0x734DE8181F6EC39A), HASHKEY(0x2680B122BAA28D97), HASHKEY(0x298AF231C85BAFAB), HASHKEY(0x7983EED3740847D5),
   HASHKEY(0x66C1A2A1A60CD889), HASHKEY(0x9E17E49642A3E4C1), HASHKEY(0xEDB454E7BADC0805), HASHKEY(0x50B704CAB602C329),
   HASHKEY(0x4CC317FB9CDDD023), HASHKEY(0x66B4835D9EAFEA22), HASHKEY(0x219B97E26FFC81BD), HASHKEY(0x261E4E4C0A333A9D),
   HASHKEY(0x1FE2CCA76517DB90), HASHKEY(0xD7504DFA8816EDBB), HASHKEY(0xB9571FA04DC089C8), HASHKEY(0x1DDC0325259B27DE),
   HASHKEY(0xCF3F4688801EB9AA), HASHKEY(0xF4F5D05C10CAB243), HASHKEY(0x38B6525C21A42B0E), HASHKEY(0x36F60E2BA4FA6800),
   HASHKEY(0xEB3593803173E0CE), HASHKEY(0x9C4CD6257C5A3603), HASHKEY(0xAF0C317D32ADAA8A), HASHKEY(0x258E5A80C7204C4B),
   HASHKEY(0x8B889D624D44885D), HASHKEY(0xF4D14597E660F855), HASHKEY(0xD4347F66EC8941C3), HASHKEY(0xE699ED85B0DFB40D),
   HASHKEY(0x2472F6207C2D0484), HASHKEY(0xC2A1E7B5B459AEB5), HASHKEY(0xAB4F6451CC1D45EC), HASHKEY(0x63767572AE3D6174),
   HASHKEY(0xA59E0BD101731A28), HASHKEY(0x116D0016CB948F09), HASHKEY(0x2CF9C8CA052F6E9F), HASHKEY(0x0B090A7560A968E3),
   HASHKEY(0xABEEDDB2DDE06FF1), HASHKEY(0x58EFC10B06A2068D), HASHKEY(0xC6E57A78FBD986E0), HASHKEY(0x2EAB8CA63CE802D7),
   HASHKEY(0x14A195640116F336), HASHKEY(0x7C0828DD624EC390), HASHKEY(0xD74BBE77E6116AC7), HASHKEY(0x804456AF10F5FB53),
   HASHKEY(0xEBE9EA2ADF4321C7), HASHKEY(0x03219A39EE587A30), HASHKEY(0x49787FEF17AF9924), HASHKEY(0xA1E9300CD8520548),
   HASHKEY(0x5B45E522E4B1B4EF), HASHKEY(0xB49C3B3995091A36), HASHKEY(0xD4490AD526F14431), HASHKEY(0x12A8F216AF9418C2),
   HASHKEY(0x001F837CC7350524), HASHKEY(0x1877B51E57A764D5), HASHKEY(0xA2853B80F17F58EE), HASHKEY(0x993E1DE72D36D310),
   HASHKEY(0xB3598080CE64A656), HASHKEY(0x252F59CF0D9F04BB), HASHKEY(0xD23C8E176D113600), HASHKEY(0x1BDA0492E7E4586E),
   HASHKEY(0x21E0BD5026C619BF), HASHKEY(0x3B097ADAF088F94E), HASHKEY(0x8D14DEDB30BE846E), HASHKEY(0xF95CFFA23AF5F6F4),
   HASHKEY(0x3871700761B3F743), HASHKEY(0xCA672B91E9E4FA16), HASHKEY(0x64C8E531BFF53B55), HASHKEY(0x241260ED4AD1E87D),
   HASHKEY(0x106C09B972D2E822), HASHKEY(0x7FBA195410E5CA30), HASHKEY(0x7884D9BC6CB569D8), HASHKEY(0x0647DFEDCD894A29),
   HASHKEY(0x63573FF03E224774), HASHKEY(0x4FC8E9560F91B123), HASHKEY(0x1DB956E450275779), HASHKEY(0xB8D91274B9E9D4FB),
   HASHKEY(0xA2EBEE47E2FBFCE1), HASHKEY(0xD9F1F30CCD97FB09), HASHKEY(0xEFED53D75FD64E6B), HASHKEY(0x2E6D02C36017F67F),
   HASHKEY(0xA9AA4D20DB084E9B), HASHKEY(0xB64BE8D8B25396C1), HASHKEY(0x70CB6AF7C2D5BCF0), HASHKEY(0x98F076A4F7A2322E),
   HASHKEY(0xBF84470805E69B5F), HASHKEY(0x94C3251F06F90CF3), HASHKEY(0x3E003E616A6591E9), HASHKEY(0xB925A6CD0421AFF3),
   HASHKEY(0x61BDD1307C66E300), HASHKEY(0xBF8D5108E27E0D48), HASHKEY(0x240AB57A8B888B20), HASHKEY(0xFC87614BAF287E07),
   HASHKEY(0xEF02CDD06FFDB432), HASHKEY(0xA1082C0466DF6C0A), HASHKEY(0x8215E577001332C8), HASHKEY(0xD39BB9C3A48DB6CF),
   HASHKEY(0x2738259634305C14), HASHKEY(0x61CF4F94C97DF93D), HASHKEY(0x1B6BACA2AE4E125B), HASHKEY(0x758F450C88572E0B),
   HASHKEY(0x959F587D507A8359), HASHKEY(0xB063E962E045F54D), HASHKEY(0x60E8ED72C0DFF5D1), HASHKEY(0x7B64978555326F9F),
   HASHKEY(0xFD080D236DA814BA), HASHKEY(0x8C90FD9B083F4558), HASHKEY(0x106F72FE81E2C590), HASHKEY(0x7976033A39F7D952),
   HASHKEY(0xA4EC0132764CA04B), HASHKEY(0x733EA705FAE4FA77), HASHKEY(0xB4D8F77BC3E56167), HASHKEY(0x9E21F4F903B33FD9),
   HASHKEY(0x9D765E419FB69F6D), HASHKEY(0xD30C088BA61EA5EF), HASHKEY(0x5D94337FBFAF7F5B), HASHKEY(0x1A4E4822EB4D7A59),
   HASHKEY(0x6FFE73E81B637FB3), HASHKEY(0xDDF957BC36D8B9CA), HASHKEY(0x64D0E29EEA8838B3), HASHKEY(0x08DD9BDFD96B9F63),
   HASHKEY(0x087E79E5A57D1D13), HASHKEY(0xE328E230E3E2B3FB), HASHKEY(0x1C2559E30F0946BE), HASHKEY(0x720BF5F26F4D2EAA),
   HASHKEY(0xB0774D261CC609DB), HASHKEY(0x443F64EC5A371195), HASHKEY(0x4112CF68649A260E), HASHKEY(0xD813F2FAB7F5C5CA),
   HASHKEY(0x660D3257380841EE), HASHKEY(0x59AC2C7873F910A3), HASHKEY(0xE846963877671A17), HASHKEY(0x93B633ABFA3469F8),
   HASHKEY(0xC0C0F5A60EF4CDCF), HASHKEY(0xCAF21ECD4377B28C), HASHKEY(0x57277707199B8175), HASHKEY(0x506C11B9D90E8B1D),
   HASHKEY(0xD83CC2687A19255F), HASHKEY(0x4A29C6465A314CD1), HASHKEY(0xED2DF21216235097), HASHKEY(0xB5635C95FF7296E2),
   HASHKEY(0x22AF003AB672E811), HASHKEY(0x52E762596BF68235), HASHKEY(0x9AEBA33AC6ECC6B0), HASHKEY(0x944F6DE09134DFB6),
   HASHKEY(0x6C47BEC883A7DE39), HASHKEY(0x6AD047C430A12104), HASHKEY(0xA5B1CFDBA0AB4067), HASHKEY(0x7C45D833AFF07862),
   HASHKEY(0x5092EF950A16DA0B), HASHKEY(0x9338E69C052B8E7B), HASHKEY(0x455A4B4CFE30E3F5), HASHKEY(0x6B02E63195AD0CF8),
   HASHKEY(0x6B17B224BAD6BF27), HASHKEY(0xD1E0CCD25BB9C169), HASHKEY(0xDE0C89A556B9AE70), HASHKEY(0x50065E535A213CF6),
   HASHKEY(0x9C1169FA2777B874), HASHKEY(0x78EDEFD694AF1EED), HASHKEY(0x6DC93D9526A50E68), HASHKEY(0xEE97F453F06791ED),
   HASHKEY(0x32AB0EDB696703D3), HASHKEY(0x3A6853C7E70757A7), HASHKEY(0x31865CED6120F37D), HASHKEY(0x67FEF95D92607890),
   HASHKEY(0x1F2B1D1F15F6DC9C), HASHKEY(0xB69E38A8965C6B65), HASHKEY(0xAA9119FF184CCCF4), HASHKEY(0xF43C732873F24C13),
   HASHKEY(0xFB4A3D794A9A80D2), HASHKEY(0x3550C2321FD6109C), HASHKEY(0x371F77E76BB8417E), HASHKEY(0x6BFA9AAE5EC05779),
   HASHKEY(0xCD04F3FF001A4778), HASHKEY(0xE3273522064480CA), HASHKEY(0x9F91508BFFCFC14A), HASHKEY(0x049A7F41061A9E60),
   HASHKEY(0xFCB6BE43A9F2FE9B), HASHKEY(0x08DE8A1C7797DA9B), HASHKEY(0x8F9887E6078735A1), HASHKEY(0xB5B4071DBFC73A66),
   HASHKEY(0x230E343DFBA08D33), HASHKEY(0x43ED7F5A0FAE657D), HASHKEY(0x3A88A0FBBCB05C63), HASHKEY(0x21874B8B4D2DBC4F),
   HASHKEY(0x1BDEA12E35F6A8C9), HASHKEY(0x53C065C6C8E63528), HASHKEY(0xE34A1D250E7A8D6B), HASHKEY(0xD6B04D3B7651DD7E),
   HASHKEY(0x5E90277E7CB39E2D), HASHKEY(0x2C046F22062DC67D), HASHKEY(0xB10BB459132D0A26), HASHKEY(0x3FA9DDFB67E2F199),
   HASHKEY(0x0E09B88E1914F7AF), HASHKEY(0x10E8B35AF3EEAB37), HASHKEY(0x9EEDECA8E272B933), HASHKEY(0xD4C718BC4AE8AE5F),
   HASHKEY(0x81536D601170FC20), HASHKEY(0x91B534F885818A06), HASHKEY(0xEC8177F83F900978), HASHKEY(0x190E714FADA5156E),
   HASHKEY(0xB592BF39B0364963), HASHKEY(0x89C350C893AE7DC1), HASHKEY(0xAC042E70F8B383F2), HASHKEY(0xB49B52E587A1EE60),
   HASHKEY(0xFB152FE3FF26DA89), HASHKEY(0x3E666E6F69AE2C15), HASHKEY(0x3B544EBE544C19F9), HASHKEY(0xE805A1E290CF2456),
   HASHKEY(0x24B33C9D7ED25117), HASHKEY(0xE74733427B72F0C1), HASHKEY(0x0A804D18B7097475), HASHKEY(0x57E3306D881EDB4F),
   HASHKEY(0x4AE7D6A36EB5DBCB), HASHKEY(0x2D8D5432157064C8), HASHKEY(0xD1E649DE1E7F268B), HASHKEY(0x8A328A1CEDFE552C),
   HASHKEY(0x07A3AEC79624C7DA), HASHKEY(0x84547DDC3E203C94), HASHKEY(0x990A98FD5071D263), HASHKEY(0x1A4FF12616EEFC89),
   HASHKEY(0xF6F7FD1431714200), HASHKEY(0x30C05B1BA332F41C), HASHKEY(0x8D2636B81555A786), HASHKEY(0x46C9FEB55D120902),
   HASHKEY(0xCCEC0A73B49C9921), HASHKEY(0x4E9D2827355FC492), HASHKEY(0x19EBB029435DCB0F), HASHKEY(0x4659D2B743848A2C),
   HASHKEY(0x963EF2C96B33BE31), HASHKEY(0x74F85198B05A2E7D), HASHKEY(0x5A0F544DD2B1FB18), HASHKEY(0x03727073C2E134B1),
   HASHKEY(0xC7F6AA2DE59AEA61), HASHKEY(0x352787BAA0D7C22F), HASHKEY(0x9853EAB63B5E0B35), HASHKEY(0xABBDCDD7ED5C0860),
   HASHKEY(0xCF05DAF5AC8D77B0), HASHKEY(0x49CAD48CEBF4A71E), HASHKEY(0x7A4C10EC2158C4A6), HASHKEY(0xD9E92AA246BF719E),
   HASHKEY(0x13AE978D09FE5557), HASHKEY(0x730499AF921549FF), HASHKEY(0x4E4B705B92903BA4), HASHKEY(0xFF577222C14F0A3A),
   HASHKEY(0x55B6344CF97AAFAE), HASHKEY(0xB862225B055B6960), HASHKEY(0xCAC09AFBDDD2CDB4), HASHKEY(0xDAF8E9829FE96B5F),
   HASHKEY(0xB5FDFC5D3132C498), HASHKEY(0x310CB380DB6F7503), HASHKEY(0xE87FBB46217A360E), HASHKEY(0x2102AE466EBB1148),
   HASHKEY(0xF8549E1A3AA5E00D), HASHKEY(0x07A69AFDCC42261A), HASHKEY(0xC4C118BFE78FEAAE), HASHKEY(0xF9F4892ED96BD438),
   HASHKEY(0x1AF3DBE25D8F45DA), HASHKEY(0xF5B4B0B0D2DEEEB4), HASHKEY(0x962ACEEFA82E1C84), HASHKEY(0x046E3ECAAF453CE9),
   HASHKEY(0xF05D129681949A4C), HASHKEY(0x964781CE734B3C84), HASHKEY(0x9C2ED44081CE5FBD), HASHKEY(0x522E23F3925E319E),
   HASHKEY(0x177E00F9FC32F791), HASHKEY(0x2BC60A63A6F3B3F2), HASHKEY(0x222BBFAE61725606), HASHKEY(0x486289DDCC3D6780),
   HASHKEY(0x7DC7785B8EFDFC80), HASHKEY(0x8AF38731C02BA980), HASHKEY(0x1FAB64EA29A2DDF7), HASHKEY(0xE4D9429322CD065A),
   HASHKEY(0x9DA058C67844F20C), HASHKEY(0x24C0E332B70019B0), HASHKEY(0x233003B5A6CFE6AD), HASHKEY(0xD586BD01C5C217F6),
   HASHKEY(0x5E5637885F29BC2B), HASHKEY(0x7EBA726D8C94094B), HASHKEY(0x0A56A5F0BFE39272), HASHKEY(0xD79476A84EE20D06),
   HASHKEY(0x9E4C1269BAA4BF37), HASHKEY(0x17EFEE45B0DEE640), HASHKEY(0x1D95B0A5FCF90BC6), HASHKEY(0x93CBE0B699C2585D),
   HASHKEY(0x65FA4F227A2B6D79), HASHKEY(0xD5F9E858292504D5), HASHKEY(0xC2B5A03F71471A6F), HASHKEY(0x59300222B4561E00),
   HASHKEY(0xCE2F8642CA0712DC), HASHKEY(0x7CA9723FBB2E8988), HASHKEY(0x2785338347F2BA08), HASHKEY(0xC61BB3A141E50E8C),
   HASHKEY(0x150F361DAB9DEC26), HASHKEY(0x9F6A419D382595F4), HASHKEY(0x64A53DC924FE7AC9), HASHKEY(0x142DE49FFF7A7C3D),
   HASHKEY(0x0C335248857FA9E7), HASHKEY(0x0A9C32D5EAE45305), HASHKEY(0xE6C42178C4BBB92E), HASHKEY(0x71F1CE2490D20B07),
   HASHKEY(0xF1BCC3D275AFE51A), HASHKEY(0xE728E8C83C334074), HASHKEY(0x96FBF83A12884624), HASHKEY(0x81A1549FD6573DA5),
   HASHKEY(0x5FA7867CAF35E149), HASHKEY(0x56986E2EF3ED091B), HASHKEY(0x917F1DD5F8886C61), HASHKEY(0xD20D8C88C8FFE65F),
   HASHKEY(0x31D71DCE64B2C310), HASHKEY(0xF165B587DF898190), HASHKEY(0xA57E6339DD2CF3A0), HASHKEY(0x1EF6E6DBB1961EC9),
   HASHKEY(0x70CC73D90BC26E24), HASHKEY(0xE21A6B35DF0C3AD7), HASHKEY(0x003A93D8B2806962), HASHKEY(0x1C99DED33CB890A1),
   HASHKEY(0xCF3145DE0ADD4289), HASHKEY(0xD0E4427A5514FB72), HASHKEY(0x77C621CC9FB3A483), HASHKEY(0x67A34DAC4356550B),
   HASHKEY(0xF8D626AAAF278509)
};

PolyglotBook::PolyglotBook()
{
	isOpen = false;
	isDirty = false;
}

PolyglotBook::PolyglotBook(string& bookfile)
{
	open(bookfile);
}

PolyglotBook::~PolyglotBook()
{
	close();
}

bool PolyglotBook::open(string& bookfile)
{
	HASHKEY key;
	PolyglotDataEntry pde;
	int length;
	unsigned char* buf;
	// ask the user first
//	if (isOpen && isDirty)
//		save();
	isDirty = false;
	isOpen = false;
	ifstream file;
	file.open(bookfile, ios::binary);
	if (!file.is_open())
		return false;
	filename = bookfile;
	book.clear();
	file.seekg(0, ios::end);
	length = file.tellg();
	file.seekg(0, ios::beg);
	buf = new unsigned char[length];
	file.read((char*)buf, length);
	file.close();
	int i=0;
	while (i<length)
	{
		key = (HASHKEY)(buf[i + 0]) << 56;
		key += (HASHKEY)(buf[i + 1]) << 48;
		key += (HASHKEY)(buf[i + 2]) << 40;
		key += (HASHKEY)(buf[i + 3]) << 32;
		key += (HASHKEY)(buf[i + 4]) << 24;
		key += (HASHKEY)(buf[i + 5]) << 16;
		key += (HASHKEY)(buf[i + 6]) << 8;
		key += (HASHKEY)(buf[i + 7]);
		pde.move = (unsigned short)(buf[i + 8]) << 8;
		pde.move += (unsigned short)(buf[i + 9]);
		pde.weight = (unsigned short)(buf[i + 10]) << 8;
		pde.weight += (unsigned short)(buf[i + 11]);
		pde.learn = (unsigned int)(buf[i + 12]) << 24;
		pde.learn += (unsigned int)(buf[i + 13]) << 16;
		pde.learn += (unsigned int)(buf[i + 14]) << 8;
		pde.learn += (unsigned int)(buf[i + 15]);
		if ((pde.move > 0) && (pde.weight>0))
			add(key, pde);
		i += 16;
	}
	delete buf;
	isOpen = true;
	return true;
}

void PolyglotBook::add(HASHKEY key, PolyglotDataEntry& pde)
{
	int i, j;
/*
	if (book[key].size())
	{
		for (i = 0; i < book[key].size(); i++)
			if (book[key].value(i).move == pde.move)
				return;
	}
	*/
	book[key].push_back(pde);
}

void PolyglotBook::add(ChessBoard& cb, ChessMove& move, unsigned short weight, unsigned int learn)
{
	PolyglotDataEntry pde;
	if (!cb.isLegal(move))
		return;
	if (move.moveType == CASTLE)
	{
		if (move.fromSquare == e1)
		{
			if (move.toSquare == g1)
				pde.move = 0b000100000111;
			else
				pde.move = 0b000100000000;
		}
		else
		{
			if (move.toSquare == g8)
				pde.move = 0b111100111111;
			else
				pde.move = 0b111100111000;
		}
	}
	else
	{
		pde.move = FILE(move.toSquare);
		pde.move += RANK(move.toSquare) << 3;
		pde.move += FILE(move.fromSquare) << 6;
		pde.move += RANK(move.fromSquare) << 9;
		if (PIECE(move.promotePiece) == QUEEN)
			pde.move += 4 << 12;
		if (PIECE(move.promotePiece) == ROOK)
			pde.move += 3 << 12;
		if (PIECE(move.promotePiece) == BISHOP)
			pde.move += 2 << 12;
		if (PIECE(move.promotePiece) == KNIGHT)
			pde.move += 1 << 12;
	}
	pde.weight = weight;
	pde.learn = learn;
	add(getKey(cb), pde);
}

void PolyglotBook::save()
{
/*	PolyglotDataEntry pde;
	char buf[16];
	if (filename.empty())
		return;
	ofstream file(filename);
	if (!file.is_open())
		return;
	int move;
	QMapIterator<HASHKEY, QVector<PolyglotDataEntry>> entry(book);
	while (entry.hasNext())
	{
		entry.next();
		for (move = 0; move < entry.value().size(); move++)
		{
			if (entry.value().at(move).weight>0)
			{
				buf[0] = (entry.key() >> 56) & 0xff;
				buf[1] = (entry.key() >> 48) & 0xff;
				buf[2] = (entry.key() >> 40) & 0xff;
				buf[3] = (entry.key() >> 32) & 0xff;
				buf[4] = (entry.key() >> 24) & 0xff;
				buf[5] = (entry.key() >> 16) & 0xff;
				buf[6] = (entry.key() >> 8) & 0xff;
				buf[7] = entry.key() & 0xff;
				buf[8] = (entry.value().at(move).move >> 8) & 0xff;
				buf[9] = entry.value().at(move).move & 0xff;
				buf[10] = (entry.value().at(move).weight >> 8) & 0xff;
				buf[11] = entry.value().at(move).weight & 0xff;
				buf[12] = (entry.value().at(move).learn >> 24) & 0xff;
				buf[13] = (entry.value().at(move).learn >> 16) & 0xff;
				buf[14] = (entry.value().at(move).learn >> 8) & 0xff;
				buf[15] = entry.value().at(move).learn & 0xff;
				file.write(buf, 16);
			}
		}
	}
	file.close();
*/
}

void PolyglotBook::close()
{
	filename.clear();
	book.clear();
	isOpen = false;
}

void PolyglotBook::get(ChessBoard& cb, vector<PolyglotDataEntry>&moves)
{
	HASHKEY key=getKey(cb);
	moves.clear();
	moves = book[key];
}

HASHKEY PolyglotBook::getKey(ChessBoard& cb)
{
	HASHKEY key = (HASHKEY)0;
	int pg_piece[13] = { -1,1,3,5,7,9,11,0,2,4,6,8,10 };

	// Pieces
	typeSquare sq = 0;
	int file, row, piece, p;
	for (row = 0; row < 8; row++)
	{
		for (file = 0; file < 8; file++)
		{
			piece = pg_piece[cb.board[SQUARE(file, row)]];
			if (piece >= 0)
				key ^= PolyglotRandom64[64 * piece + 8 * row + file];
		}
	}

	if (cb.castle&whitekingsidecastle)
		key ^= PolyglotRandom64[768];
	if (cb.castle&whitequeensidecastle)
		key ^= PolyglotRandom64[769];
	if (cb.castle&blackkingsidecastle)
		key ^= PolyglotRandom64[770];
	if (cb.castle&blackqueensidecastle)
		key ^= PolyglotRandom64[771];

	// EnPassant
	if (cb.enPassant != UNDEF)
		key ^= PolyglotRandom64[772 + FILE(cb.enPassant)];

	// Set color to move
	if (cb.toMove == WHITE)
		key ^= PolyglotRandom64[780];

	return key;
}

ChessMove PolyglotBook::move(ChessBoard& cb, unsigned short m)
{
	// Castling
	if ((m == 0b000100000111) && (cb.castle&whitekingsidecastle))
		return cb.getMoveFromText("O-O");
	else if ((m == 0b000100000000) && (cb.castle&whitequeensidecastle))
		return cb.getMoveFromText("O-O-O");
	else if ((m == 0b111100111111) && (cb.castle&blackkingsidecastle))
		return cb.getMoveFromText("O-O");
	else if ((m == 0b111100111000) && (cb.castle&blackqueensidecastle))
		return cb.getMoveFromText("O-O-O");
	// Other moves
	char sz[16]="a1a1";
	sz[0] += (m >> 6) & 7;
	sz[1] += (m >> 9) & 7;
	sz[2] += m & 7;
	sz[3] += (m >> 3) & 7;
	switch ((m >> 12) & 7)
	{
	case 1:
		sz[4] = 'N';
		break;
	case 2:
		sz[4] = 'B';
		break;
	case 3:
		sz[4] = 'R';
		break;
	case 4:
		sz[4] = 'Q';
		break;
	default:
		sz[4] = '\0';
		break;
	}
	sz[5] = '\0';
	return cb.getMoveFromText(sz);
}

bool PolyglotBook::exist(ChessBoard& cb)
{
	HASHKEY key = getKey(cb);
	int i;
	if (book[key].size())
		return true;
	//for (i = 0; i < book.size(); i++)
	//{
	//	if (book[i].key == key)
	//		return true;
	//}
	return false;
}

int PolyglotBook::moves()
{
	int m = 0;

	//for (int i = 0; i < book.size(); i++)
	//	m += book[i].moves.size();

/*
	QMapIterator<HASHKEY, QVector<PolyglotDataEntry>> entry(book);
	while (entry.hasNext())
	{
		entry.next();
		m += entry.value().size();
	}
	*/
	return m;
}

int PolyglotBook::positions()
{
	return (int)book.size();
}

ChessMove PolyglotBook::select(ChessBoard& board, vector<PolyglotDataEntry>& data, bool best)
{
	ChessMove m;
	int len = data.size();
	int i;
	int max=0,high=0;

	if (len < 1)
	{
		m.clear();
		return m;
	}

	if (best)
	{
		for (i = 0; i < len; i++)
		{
			if (data[i].weight > high)
				high = data[i].weight;
		}
		for (i = 0; i < len; i++)
		{
			if (data[i].weight != high)
				data[i].weight = 0;
		}
	}
	vector<PolyglotDataEntry> d;

	for (i = 0; i < len; i++)
	{
		if (data[i].weight > 0)
			d.push_back(data[i]);
	}

	len = d.size();

	for (i = 0; i < len; i++)
		max += d[i].weight;

	if (max<1)
	{
		m.clear();
		return m;
	}

	srand(time(0));
	int ran = rand() % max;
	max = 0;
	unsigned short pm;
	for (i=0;i < len;i++)
	{
		pm = data[i].move;
		max += data[i].weight;
		if (max > ran)
			break;
	}

	return move(board, pm);
}